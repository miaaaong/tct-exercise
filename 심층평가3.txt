# 3차수

3. 적용 기술
thread - next 작업이 여러 개인 경우 동시 실행하고 모두 종료될 때 대기하기 위해서 사용
gson - json을 parsing해서 object로 변환
graph (dag) - 방향성을 가진 비순환 그래프 알고리즘으로 실행 정보 객체화, 실행 순서 결정
http server / servlet container - http request 처리 및 응답을 위해 적용. jetty, tomcat 등 사용 가능, spring boot 등의 프레임워크를 사용하여 설정 및 배포를 용이하게 할 수 있음


4. 제안 사항
단계별 실행 성공 여부 관리 - 작업 도중 실패한 경우 다시 실행하면 실패 또는 미실행 단계부터 실제 실행되도록 구현
timeout 적용 - 여러 작업이 중첩되어 있으므로 전체 실행 시간을 초과하는 경우 중단
모니터링 - 각 단계별 진행 상황을 관리하여 사용자에게 전체 작업 중 어느 시점이 진행 중인지 알려주는 대시보드 제공
MSA - 기본 단위의 작업이 매우 크고 자원이나 시간을 많이 소요하는 경우, 시스템에 부하를 줄이기 위하여 작업의 성격이나 도메인에 따라 service로 분리하여 설계, 배포하면 자원의 분배나 변경 및 배포가 용이함

serverless computing - 기본 단위의 작업이 매우 크고 자원이나 시간을 많이 소요하는 경우, 시스템에 부하를 줄이기 위하여 외부 자원 (ex. AWS lambda)을 사용
-> 보통 비용이 비싼 편이고 작업 시간 제약이 있기 때문에 이 아이디어는 부적절한 듯


# 2차수

file에 실시간 append 되는 내용 읽어서 처리
socket으로 전달
http api로 처리
제공되는 library 실행

3. 적용 기술
bufferedreader - 대상 파일에 대해 bufferedreader를 생성하여 새로운 line이 추가될 때마다 읽어서 처리 
skip 기능도 있으나 성능이 좋지 않으므로 오픈해놓고 계속 사용하는 것이 좋음. 
randomaccessfile은 건너 뛰고 읽는 성능은 좋으나 line별로 읽는 경우 인코딩 절차가 필요하여 비효율적
thread - 비동기, 동시 실행 등으로 작업 처리해야 하는 경우 적용 
socket - 채팅, 대시보드 같이 자주 데이터를 주고 받는 경우 적절. 중요한 정보를 송수신할 때에는 tcp 사용, 동영상 같이 일부 패킷 손실이 영향이 없는 경우에는 udp가 성능에 좋음
socket 통신과 http 통신 비교 
https://velog.io/@jinh2352/HTTP-vs-Socket-HTTP%EC%99%80-%EC%86%8C%EC%BC%93-%ED%86%B5%EC%8B%A0%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90

4. 제안 사항
MSA - 서로 다른 방식으로 작업을 처리하므로 service로 구분하여 설계, 배포하면 각 영역의 변경 및 배포가 용이함
watchservice - 내용 변경을 감지해야 할 대상 파일이나 디렉토리가 많은 경우 java의 watch service를 사용하여 감지하고 처리할 수 있다


