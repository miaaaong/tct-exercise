작년 - 솔루션/시스템 환경에 대한 분석/설계 및 주요 기술/신기술 적용 방안 제시
금년 - 응용시스템 분산화를 지원하는 솔루션 설계방안 제시

범용성을 보유한 솔루션의 설계/개발을 리딩할 수 있다
시장/기술 트렌드 및 자사 사업 방향에 align된 신규 솔루션을 기획/발굴할 수 있다.
기반 솔루션 또는 특수 목적 소프트웨어의 시장 경쟁력을 고려한 상용화를 기획할 수 있다.


# OpenTracing

분산 추적: 분산 시스템 전체에서 트랜잭션이 전파되는 정교한 여정을 재구성
OpenTracing: 어플리케이션 간 분산 추적 표준
대표적 구현체: Jaeger, Zipkin

OpenTracing 원리 - https://www.nurinamu.com/dev/2020/02/26/opentracing/
Zipkin 아키텍처 - https://zipkin.io/pages/architecture.html
OpenTracing과 Jaeger - https://bourbonkk.tistory.com/84
OpenTracing과 Zipkin - https://engineering.linecorp.com/ko/blog/line-ads-msa-opentracing-zipkin

분산 추적은 계측이 프로세스 내부와 프로세스 간에 추적 컨텍스트를 전파해야 하기 때문에 까다롭다
모든 OSS 서비스와 모든 OSS 패키지, 모든 애플리케이션별 코드가 추적 설명과 전파를 위한 메커니즘을 공유하지 않으면 인과 관계가 끊어지고 단절될 수 있다.
따라서 시스템 동작을 설명하는 단일 표준 메커니즘이 필요하다. -> OpenTracing
애플리케이션 코드, OSS 패키지 및 OSS 서비스 개발자는 특정 추적 공급업체에 종속되지 않고 자체적으로 코드를 계측할 수 있는 OpenTracing을 사용할 수 있습니다. 
분산 시스템의 모든 구성 요소를 개별적으로 계측할 수 있으며, 분산 애플리케이션 관리자는 구성 변경을 통해 다운스트림 추적 기술을 선택(또는 전환 또는 다중화)할 수 있습니다.
OpenTracing은 추적 및 스팬을 만들고 조작하기 위한 기본 요소 세트를 제공합니다. 추적은 단일 요청의 여정을 나타내는 반면 스팬은 해당 추적 내의 개별 작업 단위를 나타냅니다. 스팬은 추적 ID를 사용하여 전체 경로와 다른 구성 요소 간의 관계를 시각화하도록 연결됩니다.



# OpenTelemetry

서비스의 관측성 (observability) 확보를 위한 메트릭, 추적, 로그를 위한 프레임워크
상용 서비스 또는 오픈소스 백엔드(prometheus, grafana 등)로 데이터를 전송 및 저장하는 역할 
데이터를 수집, 변환 및 백엔드로 전송하기 위한 표준화된 SDK, API 및 OTel Collector를 제공

https://medium.com/@dudwls96/opentelemetry-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-18b6e4fe6e36
https://medium.com/@dudwls96/opentelemetry-metrics-%ED%86%B5%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%A7%80%ED%91%9C-%EC%B8%A1%EC%A0%95-%EB%B0%8F-%EC%88%98%EC%A7%91%ED%95%98%EA%B8%B0-e8bca31c1619
https://last9.io/blog/opentelemetry-vs-opentracing/ (영어)

OpenTelemetry Collector
원격 측정 데이터(Metrics, Traces, Logs)를 수신, 처리 후 OpenTelemetry 백엔드로 데이터를 내보내기는 방법을 제공
Receivers, Processors, Exporters 세 가지 구성 요소로 구성
 - receiver: filelog, fluentd, otlpexpoter ...
 - exporter: jaeger, prometheus ...
하나 이상의 receiver로 메트릭/추적/로그 데이터를 수신 -> processor로 데이터 가공 -> 하나 이상의 exporter에게 데이터 전달



# 분산 트랜잭션
2개 이상의 네트워크 상의 시스템 간의 트랜잭션

https://velog.io/@xeropise1/%EB%B6%84%EC%82%B0-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-Distributed-transaction
https://ksh-coding.tistory.com/143

시스템은 트랜잭션 리소스(transaction resource)의 역할을 하고, 트랜잭션 매니저(transaction manager)는 이러한 리소스에 관련된 모든 동작에 대해 트랜잭션의 생성 및 관리를 담당
ACID(원자성, 일관성, 고립성, 지속성)을 갖춰야 하며, 여기에서 원자성은 일의 단위(UOW)를 위해 all-or-nothing 결과를 보증해야 한다.
분산 트랜잭션의 관리 방안
- 2 Phase Commit: 코디네이터, prepare phase, commit phase
- SAGA pattern: 보상 트랜잭션을 이벤트/메시지로 소싱하여, 서비스들이 이벤트/메시지를 주고 받아 처리 (Choreography - 중개자 없는 패턴, Orchestration - 중개자 있는 패턴)



# 분산 아키텍처 패턴
https://jinn-blog.tistory.com/m/184

- 통신 패턴
P2P
API gateway
pub-sub
request-response

- 데이터 처리 패턴
event sourcing
ETL (추출, 변환, 적재)
배치
streaming processing

- 시스템 관리 패턴
Orchestration



# 서비스 디스커버리

MSA 환경에서 서비스 간 원격 호출이 필요한데 auto scaling 등으로 서비스 인스턴스의 수가 동적으로 변경되면 서비스 인스턴스들의 IP, port 정보를 발견, 저장하고 관리하는 것이 필요

https://gimmesome.tistory.com/227
https://catsbi.oopy.io/c95e714b-0d28-49d0-aff5-10acd5d0dce5
https://xonmin.tistory.com/47

service registry가 제공해야 할 기능: 고가용성, P2P, 부하 분산, 회복성, 장애 내성 
ex - zookeeper, etcd, consul ...

- client-side discovery
서비스 클라이언트가 service registry에서 서비스의 위치를 찾아 호출
ex) Netflix Eureka
서비스 인스턴스가 기동할 때 eureka 서버에 자신의 정보 (ip, port 등) 전송하고 종료 시에는 삭제, 서비스는 다른 서비스 호출 시 eureka 서버에 등록된 서비스 인스턴스 조회 후 호출


- server-side discovery
호출되는 서비스 앞단에 로드밸런서를 두고 클라이언트가 로드밸런서를 호출하면 로드밸런서가 service registry에 등록된 서비스 위치를 찾고 전달
ex) AWS ELB, Kubernetes



# Circuitbreaker

https://oliveyoung.tech/blog/2023-08-31/circuitbreaker-inventory-squad/
https://velog.io/@akfls221/resilience4j-%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4%ED%8C%A8%ED%84%B4CircuitBreaker

서비스 간의 장애 전파를 막는 역할
문제가 발생한 지점을 감지하고 실패하는 요청을 계속하지 않도록 방지하여, 시스템의 장애 확산을 막고 장애 복구를 도와주며 유저는 불필요하게 대기하지 않게 됩니다.



# API Gateway

https://nginxstore.com/blog/api-gateway/api-gateway-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/
https://bcho.tistory.com/1005

API Gateway는 클라이언트와 API 엔드포인트 사이에 있는 data plane으로 라우팅, 정책, 보안을 담당하는 개별 프록시 서버



# Consensus - Raft

https://seongjin.me/raft-consensus-algorithm/

분산 시스템의 내결함성 확보



# 분산 서비스 관련 아이템들...
protobuf, gRPC
sharding
분산 트랜잭션, 보상, 추적
로그 수집, 통합, 모니터링
API gateway, proxy
caching
service discovery
circuitbreaker
...



# 구성도
xxxmanager, xxxworker, xxxserver, xxxservlet, xxxexecutor...

BufferedReader - 버퍼 사용으로 입출력 속도 빠르고 라인 단위 입출력 편리
httpservlet
jetty - http service를 제공하기 위해 적용, 웹 서버이자 자바 서블릿 컨테이너로 경량이며 내장 가능하고 확장성이 뛰어남
Gson - 자바 객체와 json 간 변환 용이
ExecutorService (thread pool) - 스레드의 생성 소멸 개수 제어가 가능하고 자바에서 효율적 처리를 위해 제공하는 라이브러리
Thread - 병렬로 실행하기 위해 적용



# 그 외 상용화 아이디어들...
zero administration
remote management
opentelemetry
서버 이중화 (가용성) - 안정적 운영
인터페이스 방식 추가 - 요청량, 다양한 시스템 연계 등을 위해 pub/sub 등 지원
인증/권한
로깅 - 운영 상황 대응 및 추적 시 활용
이력 관리
상태 조회, 중지/재시작 기능 
fatigue 관리
kubernetes
모니터링/통계/레포트
실행 정보, 이력 관리 등을 위해 DB 저장

